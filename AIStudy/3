from numpy import *

def createTrainMatrix():
	trainMatrix = [['my','dog','has','flea','problems','help','plz'],
		['maybe','not','take','him','to','dog','park','stupid'],
		['my','pet','is','so','cute','I','love','him'],
		['stop','stupid','garbage'],
		['mr','lickks','ate','my','steak','how','to','stop','him'],
		['quit','buying','worth','less','dog','food','stupid']]
	classVec = [0,1,0,1,0,1]	
	return trainMatrix,classVec

def createVocabSet(trainMatrix):
	vocabSet = set([])
	for trainList in trainMatrix:
		vocabSet = vocabSet | set(trainList)
	return list(vocabSet)

def bagOfVocab(inputMatrix,vocabSet):
	outputMatrix = []
	for inputList in inputMatrix:
		outputList = [0]*len(vocabSet)
		for word in inputList:
			outputList[vocabSet.index(word)] += 1
		outputMatrix.append(outputList)
	return outputMatrix

def trainNB():
	trainMatrix,classVec = createTrainMatrix()
	vocabSet = createVocabSet(trainMatrix)
	vocabSet = sort(vocabSet)
	outputMatrix = bagOfVocab(trainMatrix,vocabSet)
	numList = len(outputMatrix)
	numWord = len(outputMatrix[0])

	vecBad = ones(numWord)
	vecNormal = ones(numWord)
	countBad = countNormal = 0.0
	for i in range(numList):
		if classVec[i]==1:
			vecBad += outputMatrix[i]
			countBad += sum(outputMatrix[i])
		else:
			vecNormal += outputMatrix[i]
			countNormal += sum(outputMatrix[i])
	pBad = vecBad/float(countBad)
	pNormal = vecNormal/float(countNormal)
	return pBad,pNormal,vocabSet


print(trainNB())
